"use strict";
/*!
 * Copyright 2018 Google LLC.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.KVStore = void 0;
const invalidKeyError = 'Invalid key. Only a string or number may be used.';
function isValidKey(key) {
    return typeof key === 'string' || typeof key === 'number';
}
class KVStore {
    constructor(dataset) {
        this.dataset = dataset;
    }
    delete(key, callback) {
        if (!isValidKey(key)) {
            throw new Error(invalidKeyError);
        }
        key = this.dataset.key(['KeyValue', key]);
        if (!callback) {
            return this.dataset.delete(key);
        }
        this.dataset.delete(key, callback);
    }
    get(key, callback) {
        if (!isValidKey(key)) {
            throw new Error(invalidKeyError);
        }
        key = this.dataset.key(['KeyValue', key]);
        if (!callback) {
            return this.dataset.get(key).then(x => {
                return x[0] && x[0].value;
            });
        }
        this.dataset.get(key, (err, entity) => {
            if (err) {
                callback(err);
                return;
            }
            callback(null, entity && entity.value);
        });
    }
    set(key, value, callback) {
        if (!isValidKey(key)) {
            throw new Error(invalidKeyError);
        }
        const request = {
            key: this.dataset.key(['KeyValue', key]),
            data: {
                value,
            },
        };
        if (!callback) {
            return this.dataset.save(request);
        }
        this.dataset.save(request, callback);
    }
}
exports.KVStore = KVStore;
//# sourceMappingURL=index.js.map