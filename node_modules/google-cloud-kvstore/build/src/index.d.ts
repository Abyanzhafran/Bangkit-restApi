/*!
 * Copyright 2018 Google LLC.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
export declare type Key = string | number;
export declare type DeleteCallback = (err?: Error) => void;
export declare type SetCallback = (err?: Error) => void;
export declare type GetCallback = (err: Error | null, entity?: Entity) => void;
export declare type Value = any;
export interface Entity {
    value: Value;
}
export interface SetRequest {
    key: Key;
    data: Value;
}
export interface DataSet {
    key(input: Key[]): Key;
    delete(key: Key): Promise<void>;
    delete(key: Key, callback: DeleteCallback): void;
    get(key: Key, callback: GetCallback): void;
    get(key: Key): Promise<[Entity]>;
    save(request: SetRequest, callback: SetCallback): void;
    save(request: SetRequest): Promise<void>;
}
export declare class KVStore {
    dataset: DataSet;
    constructor(dataset: DataSet);
    delete(key: Key): Promise<void>;
    delete(key: Key, callback: DeleteCallback): void;
    get(key: Key): Promise<Entity>;
    get(key: Key, callback: GetCallback): void;
    set(key: Key, value: Value): Promise<void>;
    set(key: Key, value: Value, callback: SetCallback): void;
}
